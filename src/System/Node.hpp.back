//-*-c++-*-
#ifndef _NPGTOSOptimizationNode_hpp
#define _NPGTOSOptimizationNode_hpp

//---
#include "NPGTOS.hpp"
#include "Core/Core.hpp"
#include "Core/Constants.hpp"
#include "System/System.hpp"
#include "System/DynamicLineup.hpp"
#include "Optimization/Optimization.hpp"

//---
using namespace NPGTOS;

//---
class Optimization::Node : public System::DynamicLineup {

  private :

  protected :

    //--- Temperature of the Node:
    //    Assumed spatially equal everywhere in the Node i.e. grad(temperature)== 0,0,0 vector) 
    Core::ScalarQuantity temperature;  

    //--- Thermodynamic pressure of the Node:
    //    Assumed spatially equal everywhere in the Node i.e. grad(thermoPressure)== 0,0,0 vector)
    //    NOTE: We will probably eventually implement a class(or classes) which inherits from this
    //          class and which will include some kind of non-thermodynamic pressure, i.e with
    //          1). a diagonal pressure tensor 2). A full 2nd order tensor. But we will always
    //          need the thermodynamic pressure for all cases even for full disequilibrium conditions.
    Core::ScalarQuantity thermoPressure; 
    
    virtual inline Node& init() final;
  
  public :

    Node();
    ~Node();
};

//---
inline Optimization::Node& Optimization::Node::init() {

  this->temperature= Core::STD_TEMPERATURE;

  //--- Same as this->temperature= Core::STD_TEMPERATURE;
  //this->temperature.init(STD_TEMPERATURE,0.0,K)

  this->thermoPressure= Core::STD_PRESSURE;

  return *this;
}

#endif
